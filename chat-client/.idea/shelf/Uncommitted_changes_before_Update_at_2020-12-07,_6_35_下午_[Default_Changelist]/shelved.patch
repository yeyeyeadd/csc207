Index: src/main/java/ca/utoronto/cs/ChatClient.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ca.utoronto.cs;\n\nimport ca.utoronto.cs.View.LoginFrame;\nimport ca.utoronto.cs.entity.Role;\nimport ca.utoronto.cs.entity.TypeofEvent;\nimport ca.utoronto.cs.message.*;\nimport io.netty.bootstrap.Bootstrap;\nimport io.netty.channel.Channel;\nimport io.netty.channel.EventLoopGroup;\nimport io.netty.channel.nio.NioEventLoopGroup;\nimport io.netty.channel.socket.nio.NioSocketChannel;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\nimport javax.swing.*;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.ExecutionException;\n\npublic class ChatClient {\n\tprivate final Logger logger = LogManager.getLogger();\n\tprivate String host;\n\tprivate int port;\n\n\tpublic ChatClient(String host, int port) {\n\t\tthis.host = host;\n\t\tthis.port = port;\n\t}\n\n\tpublic void run() {\n\t\tlogger.info(\"Connecting to {} port {}\", host, port);\n\t\tRequestManager reqMgr = new RequestManager();\n\t\ttry {\n\t\t\treqMgr.connect(host, port);\n\t\t}\n\t\tcatch (InterruptedException e) {\n\t\t\tlogger.error(\"unable to connect to server\");\n\t\t\treturn;\n\t\t}\n\t\treqMgr.subscribe(BannerResponse.class).subscribe(resp ->\n\t\t\tSystem.out.println(String.format(\"Banner: %s\", resp.message)));\n\n\n\t\tSwingUtilities.invokeLater(() -> {\n\t\t\tLoginFrame frame = new LoginFrame(reqMgr);\n\t\t\tframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n\t\t\tframe.setVisible(true);\n\t\t});\n\n\t\ttry{\n\t\t\tBufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n\t\t\twhile(true) {\n\t\t\t\tString line = in.readLine();\n\t\t\t\tif (line.equals(\"exit\"))\n\t\t\t\t\tbreak;\n\t\t\t\telse if (line.startsWith(\"login \")) {\n\t\t\t\t\tString[] params = line.split(\" \");\n\t\t\t\t\tLoginRequest req = new LoginRequest();\n\t\t\t\t\treq.username = params[1];\n\t\t\t\t\treq.password = params[2];\n\t\t\t\t\tSystem.out.printf(\"logging in as %s\\n\", req.username);\n\t\t\t\t\treqMgr.sendAsync(req)\n\t\t\t\t\t\t\t.thenAccept(System.out::println)\n\t\t\t\t\t\t\t.exceptionally(err -> {\n\t\t\t\t\t\t\t\tSystem.out.printf(\"err:%s%n\\n\", err);\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t});\n\t\t\t\t}\n//\t\t\t\telse if (line.startsWith(\"newevent \")) {\n//\t\t\t\t\tString[] params = line.split(\" \");\n//\t\t\t\t\tCreateEventRequest req = new CreateEventRequest();\n//\t\t\t\t\treq.name = params[1];\n//\t\t\t\t\treq.room = params[2];\n//\t\t\t\t\treq.speaker = new ArrayList<>(Arrays.asList(params[3].split(\",\")));\n//\t\t\t\t\treq.startTime = params[4];\n//\t\t\t\t\treq.endTime = params[5];\n//\t\t\t\t\tif(params[6].equal(\"solo\")){\n//\t\t\t\t\t\treq.type = TypeofEvent.SOLO;\n//\t\t\t\t\t}\n//\t\t\t\t\telse if (params[6].equals(\"none\")){\n//\t\t\t\t\t\treq.type = TypeofEvent.NONE;\n//\t\t\t\t\t}\n//\t\t\t\t\telse if (params[6].equals(\"multiple\")){\n//\t\t\t\t\t\treq.type = TypeofEvent.MULTIPLE;\n//\t\t\t\t\t}\n//\t\t\t\t\telse if (params[6].equals(\"vipevent\")){\n//\t\t\t\t\t\treq.type = TypeofEvent.VIPEVENT;\n//\t\t\t\t\t}\n//\t\t\t\t\treq.type = params[6];\n//\t\t\t\t\treq.capacity = params[7];\n//\t\t\t\t\tlogger.info(\"creating event,name={}, room={}, speaker={}, startTime={}, endTime={}, \" +\n//\t\t\t\t\t\t\t\t\t\"type={}, capacity={}\",\n//\t\t\t\t\t\t\treq.name, req.room, req.speaker, req.startTime, req.endTime, req.type, req.capacity);\n//\t\t\t\t\tchannel.writeAndFlush(req.putHeader());\n//\t\t\t\t}\n//\t\t\t\telse if (line.startsWith(\"join \")) {\n//\t\t\t\t\tString[] params = line.split(\" \");\n//\t\t\t\t\tJoinEventRequest req = new JoinEventRequest();\n//\t\t\t\t\treq.eventId = Integer.parseInt(params[1]);\n//\t\t\t\t\tlogger.info(\"joining event, id={}\", req.eventId);\n//\t\t\t\t\tchannel.writeAndFlush(req.putHeader());\n//\t\t\t\t}\n//\t\t\t\telse if (line.equals(\"listevents\")) {\n//\t\t\t\t\tListEventsRequest req = new ListEventsRequest();\n//\t\t\t\t\tlogger.info(\"listing events\");\n//\t\t\t\t\tchannel.writeAndFlush(req.putHeader());\n//\t\t\t\t}\n//\t\t\t\telse if (line.startsWith(\"broadcast \")) {\n//\t\t\t\t\tString[] params = line.split(\" \");\n//\t\t\t\t\tBroadcastAudiencesRequest req = new BroadcastAudiencesRequest();\n//\t\t\t\t\treq.eventId = Integer.parseInt(params[1]);\n//\t\t\t\t\treq.content = params[2];\n//\t\t\t\t\tchannel.writeAndFlush(req.putHeader());\n//\t\t\t\t}\n//\t\t\t\telse if (line.startsWith(\"msgspeaker \")) {\n//\t\t\t\t\tString[] params = line.split(\" \");\n//\t\t\t\t\tMessageSpeakerRequest req = new MessageSpeakerRequest();\n//\t\t\t\t\treq.eventId = Integer.parseInt(params[1]);\n//\t\t\t\t\treq.content = params[2];\n//\t\t\t\t}\n//\t\t\t\telse if (line.startsWith(\"messagefriend \")){\n//\t\t\t\t\tString[] params = line.split(\" \", 3);\n//\t\t\t\t\tMessageFriendRequest req = new MessageFriendRequest();\n//\t\t\t\t\treq.receiver = params[1];\n//\t\t\t\t\treq.msg = params[2];\n//\t\t\t\t\tlogger.info(\"creating a message\");\n//\t\t\t\t\tchannel.writeAndFlush(req.putHeader());\n//\t\t\t\t}\n//\t\t\t\telse if(line.startsWith(\"createuser \")){\n//\t\t\t\t\tString[] param = line.split(\" \");\n//\t\t\t\t\tCreateUserAccountRequest req = new CreateUserAccountRequest();\n//\t\t\t\t\treq.username = param[1];\n//\t\t\t\t\treq.password = param[2];\n//\t\t\t\t\tif (param[3].equal(\"user\")){\n//\t\t\t\t\t\treq.role = Role.USER;\n//\t\t\t\t\t}\n//\t\t\t\t\telse if(param[3].equal(\"operator\")){\n//\t\t\t\t\t\treq.role = Role.OPERATOR;\n//\t\t\t\t\t}\n//\t\t\t\t\telse if(param[3].equal(\"vip\")){\n//\t\t\t\t\t\treq.role = Role.VIP;\n//\t\t\t\t\t}\n//\t\t\t\t\tlogger.info(\"creating an user account\");\n//\t\t\t\t\tchannel.writeAndFlush(req.putHeader());\n//\t\t\t\t}\n//\t\t\t\telse if(line.startsWith(\"deleteevent \")){\n//\t\t\t\t\tString[] param = line.split(\" \");\n//\t\t\t\t\tDeleteEventRequest req = new DeleteEventRequest();\n//\t\t\t\t\treq.eventId = Integer.parseInt(param[1]);\n//\t\t\t\t\tlogger.info(\"delete event\");\n//\t\t\t\t\tchannel.writeAndFlush(req.putHeader());\n//\t\t\t\t}\n//\t\t\t\telse if(line.startsWith(\"changespeaker \")){\n//\t\t\t\t\tString[] param = line.split(\" \");\n//\t\t\t\t\tChangeSpeakerRequest req = new ChangeSpeakerRequest();\n//\t\t\t\t\treq.eventId = Integer.parseInt(param[1]);\n//\t\t\t\t\treq.speakerName = new ArrayList<>(Arrays.asList(param[2].split(\",\")));\n//\t\t\t\t\tlogger.info(\"change speaker\");\n//\t\t\t\t\tchannel.writeAndFlush(req.putHeader());\n//\t\t\t\t}\n//\t\t\t\telse if(line.startsWith(\"leave \")){\n//\t\t\t\t\tString[] param = line.split(\" \");\n//\t\t\t\t\tLeaveEventRequest req = new LeaveEventRequest();\n//\t\t\t\t\treq.eventId = Integer.parseInt(param[1]);\n//\t\t\t\t\tlogger.info(\"leave event\");\n//\t\t\t\t\tchannel.writeAndFlush(req.putHeader());\n//\t\t\t\t}\n//\t\t\t\telse if(line.equals(\"checkmsg\")){\n//\t\t\t\t\tCheckAllMessageRequest req = new CheckAllMessageRequest();\n//\t\t\t\t\tlogger.info(\"check all events\");\n//\t\t\t\t\tchannel.writeAndFlush(req.putHeader());\n//\t\t\t\t}\n//\t\t\t\telse if(line.startsWith(\"msgevent \")){\n//\t\t\t\t\tString[] param = line.split(\" \", 3);\n//\t\t\t\t\tMessageEventRequest req = new MessageEventRequest();\n//\t\t\t\t\treq.eventId = Integer.parseInt(param[1]);\n//\t\t\t\t\treq.message = param[2];\n//\t\t\t\t\tlogger.info(\"message to event\");\n//\t\t\t\t\tchannel.writeAndFlush(req.putHeader());\n//\t\t\t\t}\n//\t\t\t\telse if(line.startsWith(\"msgallspk \")){\n//\t\t\t\t\tString[] param = line.split(\" \", 2);\n//\t\t\t\t\tMessageAllSpeakerRequest req = new MessageAllSpeakerRequest();\n//\t\t\t\t\treq.message = param[1];\n//\t\t\t\t\tlogger.info(\"message all speaker\");\n//\t\t\t\t\tchannel.writeAndFlush(req.putHeader());\n//\t\t\t\t}\n//\t\t\t\telse if(line.startsWith(\"addfriend \")){\n//\t\t\t\t\tString[] param = line.split(\" \");\n//\t\t\t\t\tAddFriendRequest req = new AddFriendRequest();\n//\t\t\t\t\treq.friendId = Integer.parseInt(param[1]);\n//\t\t\t\t\tlogger.info(\"add a friend\");\n//\t\t\t\t\tchannel.writeAndFlush(req.putHeader());\n//\t\t\t\t}\n//\t\t\t\telse if(line.startsWith(\"newroom\")){\n//\t\t\t\t\tString[] param = line.split(\" \");\n//\t\t\t\t\tCreateRoomRequest req = new CreateRoomRequest();\n//\t\t\t\t\treq.id = new Integer(param[1]);\n//\t\t\t\t\treq.name = param[2];\n//\t\t\t\t\treq.capacity = new Interger(param[3]);\n//\t\t\t\t\tlogger.info(\"create a room\");\n//\t\t\t\t\tchannel.writeAndFlush(req.putHeader);\n//\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ca/utoronto/cs/ChatClient.java	(revision 03955e1cf85512fc2ee8efba22378bbd40d2fe50)
+++ src/main/java/ca/utoronto/cs/ChatClient.java	(date 1607376160827)
@@ -2,7 +2,6 @@
 
 import ca.utoronto.cs.View.LoginFrame;
 import ca.utoronto.cs.entity.Role;
-import ca.utoronto.cs.entity.TypeofEvent;
 import ca.utoronto.cs.message.*;
 import io.netty.bootstrap.Bootstrap;
 import io.netty.channel.Channel;
